#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys
import tempfile
from datetime import datetime
from typing import List


def convert(input_world_file: str, output_world_file: str, input_format: str = 'voxel', output_format: str = 'voxel'):
    try:
        subprocess.run(['rofi-convert', input_world_file, output_world_file,
                        '--input-format', input_format,
                        '--output-format', output_format,
                        ],
                       stdout=sys.stderr,
                       check=True)
    except subprocess.CalledProcessError as _:
        print(f"Error while converting '{input_world_file}' (format: {input_format})",
              f"to '{output_world_file}' (format: {output_format})",
              file=sys.stderr)
        exit(1)


def voxel_reconfig(init_voxel_file: str, goal_voxel_file: str):
    try:
        print("Starting voxel reconfiguration at",
              datetime.now().strftime("%T.%f"), file=sys.stderr)
        subprocess.run(["rofi-voxel_reconfig", init_voxel_file, goal_voxel_file],
                       check=True)
        print("Ended voxel reconfiguration at",
              datetime.now().strftime("%T.%f"), file=sys.stderr)
    except subprocess.CalledProcessError as _:
        print(f"Error while running voxel reconfig",
              file=sys.stderr)
        exit(1)


def convert_and_reconfig(init_world_file: str, goal_world_file: str, init_format: str, goal_format: str):
    assert init_world_file != '-' or goal_world_file != '-'

    with tempfile.TemporaryDirectory() as tmp_dir:
        if init_format == 'voxel':
            init_voxel_file = init_world_file
        else:
            init_voxel_file = tempfile.NamedTemporaryFile(suffix='.json',
                                                          dir=tmp_dir).name
            convert(init_world_file, init_voxel_file, input_format=init_format)

        if goal_format == 'voxel':
            goal_voxel_file = goal_world_file
        else:
            goal_voxel_file = tempfile.NamedTemporaryFile(suffix='.json',
                                                          dir=tmp_dir).name
            convert(goal_world_file, goal_voxel_file, input_format=goal_format)

        voxel_reconfig(init_voxel_file, goal_voxel_file)


def check_input_files(parser: argparse.ArgumentParser, files: List[str]):
    if files.count('-') > 1:
        parser.error("multiple input file arguments have value '-' (stdin)")

    for file in files:
        if file == '-':
            return
        if not os.path.exists(file):
            parser.error("can't open '{filename}': No such file or directory")
        if not os.path.isfile(file):
            parser.error("can't open '{filename}': Is a directory")
        if not os.access(file, os.R_OK):
            parser.error("can't open '{filename}': Is not readable")


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("init_world_file", type=str,
                        help="Path to the init world file ('-' for stdin)")
    parser.add_argument("goal_world_file", type=str,
                        help="Path to the goal world file ('-' for stdin)")
    parser.add_argument("--init-format", '--if', type=str, default='json',
                        choices=['json', 'voxel', 'old'],
                        help="Format of the init world file")
    parser.add_argument("--goal-format", '--gf', type=str, default='json',
                        choices=['json', 'voxel', 'old'],
                        help="Format of the goal world file")
    parser.add_argument("--format", '-f', type=str,
                        choices=['json', 'voxel', 'old'],
                        help="Format of world files (exclusive with --init-format and --goal-format")
    args = parser.parse_args()
    check_input_files(parser, [args.init_world_file, args.goal_world_file])

    convert_and_reconfig(args.init_world_file, args.goal_world_file,
                         args.init_format, args.goal_format)
